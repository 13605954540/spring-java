软件设计原则:
    1: 开闭原则:    对修改关闭，对扩展开放
        优点:
            易于维护和升级
        方式：
            使用接口和抽象类

    2: 里氏代换原则： 父类能用的，子类一定也要能用， 换句话说，子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法
        方式：
            使用接口和抽象类

    3: 依赖倒转原则： 高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。
        优点：
            解耦
        方式：
            使用接口和抽象类
        例子：
            依赖抽象cpu而非只依赖intel的处理器

    4： 接口隔离原则：  客户端不应该被迫依赖于它不使用的方法；一个类对另一个类的依赖应该建立在最小的接口上。
        例子：
            如某个安全门，具有三种功能，另一种只有两种功能，不应该共同继承一个接口，而应继承多个，拆分功能

    5： 迪米特法则(最少知识法则)：   如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。
        优点：
            降低类之间的耦合度，提高模块的相对独立性

    6： 合成复用原则：  尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。
        优点：
            1. 它维持了类的封装性。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱”复用。
            2. 对象间的耦合度低。可以在类的成员位置声明抽象。
            3. 复用的灵活性高。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象。

